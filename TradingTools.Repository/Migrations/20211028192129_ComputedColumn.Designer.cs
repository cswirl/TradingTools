// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingTools.Repository;

namespace TradingTools.Repository.Migrations
{
    [DbContext(typeof(TradingToolsDbContext))]
    [Migration("20211028192129_ComputedColumn")]
    partial class ComputedColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TradingTools.Trunk.Entity.CalculatorState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Capital")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("ClosingTradingCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("ClosingTradingFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CounterBias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyInterestRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<decimal>("EntryPriceAvg")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ExchangeFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("InterestCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("LEP_ExitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("LEP_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Leverage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("LotSize")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningTradingCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OpeningTradingFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PEP_ExitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("PEP_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PerfectEntry_EntryPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PerfectEntry_ExitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("PerfectEntry_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceDecreaseTarget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PriceIncreaseTarget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ReasonForEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("TradeExit_ExitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("TradeId")
                        .HasColumnType("int");

                    b.Property<string>("TradingStyle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TradeId")
                        .IsUnique()
                        .HasFilter("[TradeId] IS NOT NULL");

                    b.ToTable("CalculatorStates");
                });

            modelBuilder.Entity("TradingTools.Trunk.Entity.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BorrowAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Capital")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("DateEnter")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExit")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayCount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<decimal>("EntryPriceAvg")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("ExitPriceAvg")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("FinalCapital")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Leverage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("LeveragedCapital")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("LotSize")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PnL")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PnL_percentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("PositionSide")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TradingStyle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TradingTools.Trunk.Entity.CalculatorState", b =>
                {
                    b.HasOne("TradingTools.Trunk.Entity.Trade", "Trade")
                        .WithOne("CalculatorState")
                        .HasForeignKey("TradingTools.Trunk.Entity.CalculatorState", "TradeId");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("TradingTools.Trunk.Entity.Trade", b =>
                {
                    b.Navigation("CalculatorState");
                });
#pragma warning restore 612, 618
        }
    }
}
